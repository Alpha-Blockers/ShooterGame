
namespace ShooterGame
{
    public class PlayerCountPacket : Packet
    {
        private int _amount;

        /// <summary>
        /// Player name change packet constructor.
        /// </summary>
        /// <param name="amount">The number of players in the game.</param>
        public PlayerCountPacket(int amount)
        {
            _amount = amount;
        }

        /// <summary>
        /// Get the number of players for the game.
        /// </summary>
        public int Amount { get => _amount; }

        /// <summary>
        /// Generate a generic string output from this PlayerNameChange.
        /// </summary>
        /// <returns>PlayerNameChange in generic string form.</returns>
        public override string ToString()
        {
            return "Player count changed to " + Amount;
        }

        /// <summary>
        /// Apply this name-change to the player.
        /// </summary>
        public void Apply()
        {
            Player.InitPlayers(Amount);
        }

        /// <summary>
        /// Generate a string form of this class which can be sent using the SwinGame network functions.
        /// </summary>
        /// <param name="includePlayerIndex">The player index will be included if this is true</param>
        /// <returns>A string form of this class suitable for network transfer.</returns>
        public override string Encode(bool includePlayerIndex)
        {
            return EncodePacket(
                PacketIdentifier.PlayerCount, Amount.ToString());
        }

        /// <summary>
        /// Create a PlayerNameChange using a string generated by Encode().
        /// </summary>
        /// <param name="encodedString">A string returned by Encode().</param>
        /// <param name="playerOverride">An optional player value used to override whatever value was received.</param>
        /// <returns>A new PlayerNameChange on success, or a null reference on failure.</returns>
        public static PlayerCountPacket Decode(string encodedString, Player playerOverride = null)
        {
            // Stupidity check
            VerifyIdentifier(encodedString, PacketIdentifier.PlayerCount);

            // Split message into components
            string tail = DecodeTail(encodedString);
            int amount = 0;
            try { amount = int.Parse(tail); } catch { }
            if (amount < 1) return null;

            // Generate and return a new ChatPacket
            return new PlayerCountPacket(amount);
        }
    }
}
