
namespace ShooterGame
{
    class ChatPacket : IPacket
    {
        private const System.Char SEPARATOR = ':';

        private Player _player; // Can be null
        private string _message;
        
        /// <summary>
        /// Network chat message constructor
        /// </summary>
        /// <param name="player">The player who generated the message.</param>
        /// <param name="message">The message sent.</param>
        public ChatPacket(Player player, string message)
        {
            _player = player;
            _message = message;
        }

        /// <summary>
        /// Get the player who sent the message.
        /// </summary>
        public Player Player { get => _player; }

        /// <summary>
        /// Get the message sent.
        /// </summary>
        public string Message { get => _message; }

        /// <summary>
        /// Generate a generic string output from this ChatPacket.
        /// </summary>
        /// <returns>ChatPacket in generic string form.</returns>
        public override string ToString()
        {
            if (_player != null)
                return _player.Name + ": " + _message;
            else
                return ": " + _message;
        }

        /// <summary>
        /// Generate a string form of this class which can be sent using the SwinGame network functions.
        /// </summary>
        /// <param name="includePlayerIndex">The player index will be included if this is true</param>
        /// <returns>A string form of this class suitable for network transfer.</returns>
        public string Encode(bool includePlayerIndex)
        {
            if (includePlayerIndex && (_player != null))
                return ((char)PacketHeader.Message).ToString() + _player.Index.ToString() + SEPARATOR + _message;
            else
                return ((char)PacketHeader.Message).ToString() + SEPARATOR + _message;
        }

        /// <summary>
        /// Create a ChatPacket using a string generated by Encode().
        /// </summary>
        /// <param name="encodedString">A string returned by Encode().</param>
        /// <param name="playerOverride">An optional player value used to override whatever value was received.</param>
        /// <returns>A new ChatPacket on success, or a null reference on failure.</returns>
        public static ChatPacket Decode(string encodedString, Player playerOverride = null)
        {
            Player player;

            // Stupidity check
            if (encodedString[0] != (char)PacketHeader.Message)
                throw new System.ArgumentException("expected message to begin with '" + (char)PacketHeader.Message + "'");

            // Find separator between header data and message body
            int i = encodedString.IndexOf(SEPARATOR);
            if (i < 1) return null;

            // Record player who sent the message
            if (playerOverride != null)
            {
                player = playerOverride;
            }
            else
            {
                try
                {
                    string playerIndex = encodedString.Substring(1, i - 1); // Skip over the header byte with ...Substring(1, ...
                    player = Player.PlayerByIndex(int.Parse(playerIndex));
                }
                catch
                {
                    player = null;
                }
            }

            // Generate and return a new ChatPacket
            return new ChatPacket(player, encodedString.Substring(i + 1));
        }
    }
}
