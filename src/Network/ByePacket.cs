
namespace ShooterGame
{
    class ByePacket : Packet
    {
        /// <summary>
        /// Generate a generic string output from this ByePacket.
        /// </summary>
        /// <returns>ByePacket in generic string form.</returns>
        public override string ToString()
        {
            return "Bye packet";
        }

        /// <summary>
        /// Generate a string form of this class which can be sent using the SwinGame network functions.
        /// </summary>
        /// <param name="includePlayerIndex">The player index will be included if this is true</param>
        /// <returns>A string form of this class suitable for network transfer.</returns>
        public override string Encode(bool includePlayerIndex)
        {
            return EncodeHeader(PacketIdentifier.Bye);
        }

        /// <summary>
        /// Create a ByePacket using a string generated by Encode().
        /// </summary>
        /// <param name="encodedString">A string returned by Encode().</param>
        /// <param name="playerOverride">An optional player value used to override whatever value was received.</param>
        /// <returns>A new ByePacket on success, or a null reference on failure.</returns>
        public static ByePacket Decode(string encodedString, Player playerOverride = null)
        {
            // Stupidity check
            VerifyIdentifier(encodedString, PacketIdentifier.Bye);

            // Generate and return a new ByePacket
            return new ByePacket();
        }
    }
}
