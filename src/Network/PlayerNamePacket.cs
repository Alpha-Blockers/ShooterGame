
namespace ShooterGame
{
    class PlayerNameChange : IPacket
    {
        private const System.Char SEPARATOR = ':';

        private Player _player;
        private string _name;

        /// <summary>
        /// Player name change packet constructor.
        /// </summary>
        /// <param name="player">The player who changed their name.</param>
        /// <param name="name">The new name of the player.</param>
        public PlayerNameChange(Player player, string name)
        {
            _player = player;
            _name = name;
        }

        /// <summary>
        /// Try to get the player who changed their name.
        /// </summary>
        public Player Player { get => _player; }

        /// <summary>
        /// New name of the player.
        /// </summary>
        public string Name { get => _name; }

        /// <summary>
        /// Generate a generic string output from this PlayerNameChange.
        /// </summary>
        /// <returns>PlayerNameChange in generic string form.</returns>
        public override string ToString()
        {
            return "Player '" + _player.Name + "' is changing their name to '" + _name + "'";
        }

        /// <summary>
        /// Apply this name-change to the player.
        /// </summary>
        public void Apply()
        {
            _player.Name = _name;
        }

        /// <summary>
        /// Generate a string form of this class which can be sent using the SwinGame network functions.
        /// </summary>
        /// <param name="includePlayerIndex">The player index will be included if this is true</param>
        /// <returns>A string form of this class suitable for network transfer.</returns>
        public string Encode(bool includePlayerIndex)
        {
            if (includePlayerIndex)
                return PacketHeader.Name + _player.Index.ToString() + SEPARATOR + _name;
            else
                return PacketHeader.Name + SEPARATOR + _name;
        }

        /// <summary>
        /// Create a PlayerNameChange using a string generated by Encode().
        /// </summary>
        /// <param name="encodedString">A string returned by Encode().</param>
        /// <param name="playerOverride">An optional player value used to override whatever value was received.</param>
        /// <returns>A new PlayerNameChange on success, or a null reference on failure.</returns>
        public static PlayerNameChange Decode(string encodedString, Player playerOverride = null)
        {
            Player player;

            // Stupidity check
            if (encodedString[0] != (char)PacketHeader.Name)
                throw new System.ArgumentException("expected message to begin with '" + (char)PacketHeader.Name + "'");

            // Find separator between header data and message body
            int i = encodedString.IndexOf(SEPARATOR);
            if (i < 1) return null;

            // Record player who sent the message
            if (playerOverride != null)
            {
                player = playerOverride;
            }
            else
            {
                string playerIndex = encodedString.Substring(1, i - 1); // Skip over the header byte with ...Substring(1, ...
                player = Player.PlayerByIndex(int.Parse(playerIndex));
                if (player == null) return null;
            }

            // Generate and return a new PlayerNameChange
            return new PlayerNameChange(player, encodedString.Substring(i + 1));
        }
    }
}
