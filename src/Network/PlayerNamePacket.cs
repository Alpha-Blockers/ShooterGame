
namespace ShooterGame
{
    class PlayerNamePacket : Packet
    {
        private Player _player;
        private string _name;

        /// <summary>
        /// Player name change packet constructor.
        /// </summary>
        /// <param name="player">The player who changed their name.</param>
        /// <param name="name">The new name of the player.</param>
        public PlayerNamePacket(Player player, string name)
        {
            _player = player;
            _name = name;
        }

        /// <summary>
        /// Try to get the player who changed their name.
        /// </summary>
        public Player Player { get => _player; }

        /// <summary>
        /// New name of the player.
        /// </summary>
        public string Name { get => _name; }

        /// <summary>
        /// Generate a generic string output from this PlayerNameChange.
        /// </summary>
        /// <returns>PlayerNameChange in generic string form.</returns>
        public override string ToString()
        {
            return "'" + _player.Name + "' changed their name to '" + _name + "'";
        }

        /// <summary>
        /// Apply this name-change to the player.
        /// </summary>
        public void Apply()
        {
            _player.Name = _name;
        }

        /// <summary>
        /// Generate a string form of this class which can be sent using the SwinGame network functions.
        /// </summary>
        /// <param name="includePlayerIndex">The player index will be included if this is true</param>
        /// <returns>A string form of this class suitable for network transfer.</returns>
        public override string Encode(bool includePlayerIndex)
        {
            return EncodePacket(
                PacketIdentifier.PlayerName,
                includePlayerIndex ? _player : null,
                _name);
        }

        /// <summary>
        /// Create a PlayerNameChange using a string generated by Encode().
        /// </summary>
        /// <param name="encodedString">A string returned by Encode().</param>
        /// <param name="playerOverride">An optional player value used to override whatever value was received.</param>
        /// <returns>A new PlayerNameChange on success, or a null reference on failure.</returns>
        public static PlayerNamePacket Decode(string encodedString, Player playerOverride = null)
        {
            // Stupidity check
            VerifyIdentifier(encodedString, PacketIdentifier.PlayerName);

            // Split message into components
            string name = DecodeTail(encodedString, playerOverride, out Player player);

            // Generate and return a new ChatPacket
            return new PlayerNamePacket(player, name);
        }
    }
}
