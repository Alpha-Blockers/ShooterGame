
namespace ShooterGame
{
    public class LocalPlayerIndexPacket : Packet
    {
        private int _index;

        /// <summary>
        /// Set local player index packet constructor.
        /// </summary>
        /// <param name="name">The new name of the player.</param>
        public LocalPlayerIndexPacket(int index)
        {
            _index = index;
        }

        /// <summary>
        /// Index which should be used for the local player.
        /// </summary>
        public int Index { get => _index; }

        /// <summary>
        /// Generate a generic string output from this PlayerIndexChange.
        /// </summary>
        /// <returns>LocalPlayerIndexPacket in generic string form.</returns>
        public override string ToString()
        {
            return "Local player is being assigned index " + _index;
        }

        /// <summary>
        /// Apply this index-change to the player.
        /// </summary>
        public void Apply()
        {
            Player.SetLocalPlayerIndex(_index);
        }

        /// <summary>
        /// Generate a string form of this class which can be sent using the SwinGame network functions.
        /// </summary>
        /// <param name="includePlayerIndex">The player index will be included if this is true</param>
        /// <returns>A string form of this class suitable for network transfer.</returns>
        public override string Encode(bool includePlayerIndex)
        {
            return EncodePacket(
                PacketIdentifier.LocalPlayerIndex,
                _index.ToString());
        }

        /// <summary>
        /// Create a PlayerIndexChange using a string generated by Encode().
        /// </summary>
        /// <param name="encodedString">A string returned by Encode().</param>
        /// <param name="playerOverride">An optional player value used to override whatever value was received.</param>
        /// <returns>A new PlayerIndexChange on success, or a null reference on failure.</returns>
        public static LocalPlayerIndexPacket Decode(string encodedString, Player playerOverride = null)
        {
            // Stupidity check
            VerifyIdentifier(encodedString, PacketIdentifier.LocalPlayerIndex);

            // Split message into components
            string indexString = DecodeTail(encodedString);

            // Get player index
            int index = -1;
            if (indexString.Length > 0)
            {
                try { index = int.Parse(indexString); } catch { }
            }

            // Generate and return a new ChatPacket
            return new LocalPlayerIndexPacket(index);
        }
    }
}
